using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Algorithms_for_solving_mazes
{
    class Program
    {
        private static char[,] maze = {{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','#','.','.','.','#','.','.','.','#','.','#','.','.','.','#','.','.'},
                                       {'#','.','#','.','#','#','#','.','#','.','#','.','#','.','#','.','#','.','#','#','#','#','#','.','#','.','#','#','#','.','#','.','#'},
                                       {'#','.','#','.','.','.','#','.','#','.','#','.','#','.','.','.','.','.','#','.','.','.','#','.','.','.','#','.','#','.','.','.','#'},
                                       {'#','#','#','.','#','#','#','.','#','#','#','#','#','#','#','.','#','.','#','.','#','#','#','.','#','#','#','.','#','.','#','#','#'},
                                       {'#','.','.','.','#','.','.','.','.','.','.','.','.','.','#','.','#','.','.','.','#','.','.','.','#','.','#','.','.','.','#','.','#'},
                                       {'#','#','#','.','#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','#','.','#','.','#','.','#','.','#','#','#','.','#'},
                                       {'#','.','.','.','.','.','#','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','#','.','#','.','#','.','.','.','.','.','#'},
                                       {'#','.','#','.','#','.','#','.','#','.','#','.','#','.','#','.','#','.','#','#','#','.','#','#','#','.','#','.','#','.','#','#','#'},
                                       {'#','.','#','.','#','.','#','.','#','.','#','.','#','.','#','.','#','.','.','.','.','.','.','.','#','.','.','.','#','.','#','.','#'},
                                       {'#','.','#','.','#','.','#','.','#','#','#','.','#','#','#','#','#','.','#','#','#','#','#','#','#','.','#','.','#','#','#','.','#'},
                                       {'#','.','#','.','#','.','#','.','#','.','.','.','.','.','#','.','.','.','.','.','.','.','#','.','.','.','#','.','.','.','.','.','#'},
                                       {'#','.','#','#','#','.','#','#','#','#','#','.','#','.','#','.','#','#','#','.','#','#','#','.','#','.','#','.','#','#','#','#','#'},
                                       {'#','.','#','.','#','.','#','.','.','.','#','.','#','.','#','.','.','.','#','.','.','.','.','.','#','.','#','.','.','.','.','.','#'},
                                       {'#','.','#','.','#','.','#','.','#','#','#','.','#','.','#','.','#','#','#','.','#','.','#','.','#','.','#','#','#','#','#','.','#'},
                                       {'#','.','.','.','#','.','.','.','.','.','#','.','#','.','#','.','.','.','#','.','#','.','#','.','#','.','.','.','.','.','#','.','#'},
                                       {'#','#','#','.','#','.','#','.','#','.','#','#','#','#','#','.','#','.','#','.','#','#','#','.','#','#','#','#','#','.','#','#','#'},
                                       {'#','.','.','.','#','.','#','.','#','.','.','.','.','.','#','.','#','.','#','.','#','.','#','.','#','.','.','.','#','.','#','.','#'},
                                       {'#','.','#','#','#','#','#','#','#','.','#','#','#','#','#','.','#','.','#','#','#','.','#','.','#','.','#','.','#','.','#','.','#'},
                                       {'#','.','.','.','.','.','#','.','.','.','#','.','#','.','#','.','#','.','#','.','#','.','.','.','.','.','#','.','#','.','.','.','#'},
                                       {'#','.','#','#','#','.','#','#','#','.','#','.','#','.','#','#','#','#','#','.','#','.','#','.','#','.','#','#','#','.','#','#','#'},
                                       {'#','.','#','.','.','.','#','.','.','.','.','.','#','.','.','.','.','.','.','.','.','.','#','.','#','.','.','.','#','.','.','.','#'},
                                       {'#','.','#','#','#','#','#','#','#','#','#','#','#','.','#','#','#','.','#','.','#','#','#','#','#','#','#','.','#','#','#','.','#'},
                                       {'#','.','.','.','.','.','#','.','#','.','.','.','.','.','.','.','#','.','#','.','.','.','.','.','.','.','#','.','.','.','#','.','#'},
                                       {'#','#','#','.','#','#','#','.','#','#','#','.','#','.','#','#','#','#','#','.','#','.','#','.','#','#','#','.','#','.','#','.','#'},
                                       {'#','.','.','.','.','.','#','.','.','.','.','.','#','.','#','.','.','.','.','.','#','.','#','.','.','.','#','.','#','.','#','.','#'},
                                       {'#','.','#','.','#','#','#','.','#','#','#','#','#','.','#','#','#','.','#','.','#','#','#','#','#','#','#','.','#','#','#','.','#'},
                                       {'#','.','#','.','#','.','.','.','#','.','.','.','.','.','#','.','.','.','#','.','.','.','#','.','.','.','#','.','.','.','#','.','#'},
                                       {'#','.','#','#','#','#','#','#','#','.','#','#','#','.','#','#','#','#','#','.','#','.','#','#','#','.','#','.','#','.','#','.','#'},
                                       {'#','.','.','.','#','.','#','.','.','.','.','.','#','.','.','.','#','.','.','.','#','.','.','.','.','.','#','.','#','.','#','.','#'},
                                       {'#','.','#','#','#','.','#','.','#','#','#','#','#','.','#','.','#','#','#','.','#','.','#','#','#','#','#','#','#','#','#','#','#'},
                                       {'.','.','#','.','.','.','.','.','.','.','#','.','.','.','#','.','#','.','.','.','#','.','.','.','.','.','.','.','.','.','.','.','#'},
                                       {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}};

        private static void printMaze(char[,] maze)
        {
            for (int i = 0; i < 33; i++)
            {
                for (int j = 0; j < 33; j++)
                {
                    Console.Write(maze[i, j] + " ");
                }
                Console.WriteLine();
            }
            Console.WriteLine();
        }

        static void Main(string[] args)
        {
            Console.WriteLine("maze: ");
            printMaze(maze);

            Console.WriteLine("1: Wall follower algorithm \n2: DFS algorithm \n3: BFS algorithm \n 4: A* algorithm");
            Console.Write("Enter the number of the algorithm you want to run: ");

            string choice = Console.ReadLine();
            Console.WriteLine();

            if (choice == "1")
            {
                Console.WriteLine("Press any key to start WALL FOLLOWER algorithm!");
                Console.ReadKey();
                WallFollower.FindPath(maze);
                Console.WriteLine("Wall follower: ");
                printMaze(maze);
            }
            else if (choice == "2")
            {
                Console.WriteLine("Press any key to start DFS algorithm!");
                Console.ReadKey();
                DFS.FindPath(maze);
                Console.WriteLine("DFS: ");
                printMaze(maze);
            }
            else if (choice == "3")
            {
                Console.WriteLine("Press any key to start BFS algorithm!");
                Console.ReadKey();
                BFS.FindPath(maze);
                Console.WriteLine("BFS: ");
                printMaze(maze);
            }
            else if (choice == "4")
            {
                Console.WriteLine("Press any key to start A* algorithm!");
                Console.ReadKey();
                AStar.FindPath(maze);
                Console.WriteLine("A*: ");
                printMaze(maze);
            }

            Console.ReadKey();
        }
    }
}
